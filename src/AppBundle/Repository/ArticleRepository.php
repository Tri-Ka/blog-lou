<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * ArticleRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{
    const NB_PER_PAGE = 6;

    public function getList($page = 1, $nbMax = self::NB_PER_PAGE)
    {
        $qb = $this->createQueryBuilder('a')
            ->orderBy('a.createdAt', 'DESC');

        $query = $qb->getQuery();

        $results = ($page - 1) * $nbMax;
        $query->setFirstResult($results)->setMaxResults($nbMax);
        $paginator = new Paginator($query);

        if (($paginator->count() <= $results) && $page != 1) {
            throw new NotFoundHttpException(); // page 404, sauf pour la premiÃ¨re page
        }

        return $paginator;
    }

    public function findByTag($tag)
    {
        return $this->createQueryBuilder('a')
            ->leftJoin('a.tags', 't')
            ->andWhere('t.id = :tag')
            ->orderBy('a.createdAt', 'DESC')
            ->setParameter('tag', $tag)
            ->getQuery()
            ->getResult();
    }

    public function findByContent($content)
    {
        return $this->createQueryBuilder('a')
            ->leftJoin('a.categories', 'c')
            ->orderBy('a.createdAt', 'DESC')
            ->andWhere('a.content LIKE :content OR a.title LIKE :content OR a.htags LIKE :content OR c.name LIKE :content')
            ->setParameter('content', '%'.$content.'%')
            ->getQuery()
            ->getResult();
    }

    public function findRandom($id)
    {
        return $this->createQueryBuilder('a')
            ->andWhere('a.id != :id')
            ->orderBy('RAND()')
            ->setParameter('id', $id)
            ->setMaxResults(3)
            ->getQuery()
            ->getResult();
    }

    public function findByCategory($categoryId)
    {
        return $this->createQueryBuilder('a')
            ->leftJoin('a.categories', 'c')
            ->orderBy('a.createdAt', 'DESC')
            ->andWhere('c.id = :categoryId')
            ->setParameter('categoryId', $categoryId)
            ->getQuery()
            ->getResult();
    }
}
